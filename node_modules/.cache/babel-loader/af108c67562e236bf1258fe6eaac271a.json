{"ast":null,"code":"var _jsxFileName = \"/Users/Agent1/Desktop/rpg-calculator/src/Componets/CharacterSheet/ActionComponets/Bonus.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport theme from \"../../../Logic/theme\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  primary,\n  secondary,\n  background\n} = theme;\nconst Container = styled.div`\n  width: 95%;\n  margin: 0 auto;\n  overflow: scroll;\n`;\n_c = Container;\nconst Row = styled.div`\n  width: 90%;\n  height: 4.2em;\n  margin: 0 auto;\n  display: flex;\n  border-bottom: 1px solid ${primary};\n`;\n_c2 = Row;\nconst NameBox = styled.div`\n  display: block;\n  text-align: left;\n  margin-left: 1em;\n  min-width: 9em;\n\n  @media (max-width: 600px) {\n    min-width: 7.9em;\n  }\n`;\n_c3 = NameBox;\nconst Title = styled.p`\n  font-family: \"Dosis\";\n  color: ${primary};\n  font-size: 1.3em;\n  margin-bottom: 1;\n  @media (max-width: 600px) {\n    font-size: 1.2em;\n  }\n`;\n_c4 = Title;\nconst Type = styled.div`\n  font-size: 0.7em;\n  margin-top: -1.8em;\n  margin-left: 0.5em;\n`;\n_c5 = Type;\nconst RangeBox = styled.div`\n  margin-top: 1.2em;\n  width: 2em;\n  @media (max-width: 600px) {\n    margin-left: 0.1em;\n  }\n`;\n_c6 = RangeBox;\nconst NameLabelBox = styled.div`\n  margin: 1.2em 0 0 1.2em;\n  width: 10em;\n  @media (max-width: 600px) {\n    width: 50em;\n    margin-left: 1em;\n    margin-right: 0em;\n  }\n`;\n_c7 = NameLabelBox;\nconst LabelBox = styled.div`\n  margin-top: 1.2em;\n  margin-left: -1.1em;\n  margin-right: 2.6em;\n  width: 2em;\n  @media (max-width: 600px) {\n    margin-left: -1.5em;\n  }\n`;\n_c8 = LabelBox;\nconst Range = styled.p`\n  font-size: 0.8em;\n  font-weight: bold;\n  text-align: left;\n`;\n_c9 = Range;\nconst RollBox = styled.div`\n  border: 2px solid ${primary};\n  border-radius: 5px;\n  min-width: 2em;\n  height: 2em;\n  margin-top: 1.3em;\n  margin-left: 1.5em;\n  :hover {\n    cursor: pointer;\n    background-color: ${secondary};\n  }\n\n  @media (max-width: 600px) {\n    margin-left: 1.1em;\n  }\n`;\n_c10 = RollBox;\nconst BoxP = styled.p`\n  font-family: \"Dosis\";\n  margin-top: 0.35em;\n  color: ${background};\n`;\n_c11 = BoxP;\n\nconst Bonus = _ref => {\n  _s();\n\n  let {\n    bonusAttack,\n    reactions\n  } = _ref;\n  const [lastRoll, setLastRoll] = useState(\"\");\n  const [lastRoll2, setLastRoll2] = useState(\"\");\n  const [numOfRoll, setNumofRoll] = useState(0);\n  const [numOfDice, setNumofDice] = useState(undefined);\n  const [diceType, setDiceType] = useState(null);\n\n  const rollDC = (name, mod) => {\n    const roll = Math.floor(Math.random() * 20) + 1;\n\n    const str = () => {\n      if (mod > 0) {\n        setLastRoll(`${name} to hit:`);\n        setLastRoll2(`Roll ${roll} + Bonus ${mod} = ${roll + mod}`);\n      }\n\n      if (mod < 0) {\n        setLastRoll(`${name} to hit:`);\n        setLastRoll2(`Roll ${roll} - Bonus ${mod} = ${roll + mod}`);\n      }\n\n      if (mod = 0) {\n        setLastRoll(`${name} to hit: Roll ${roll}:`);\n        setLastRoll2(\"\");\n      }\n    };\n\n    str();\n    setNumofRoll(numOfRoll + 1);\n    setDiceType(undefined);\n  };\n\n  const rollAttack = (name, mod, num, type) => {\n    const rolls = [];\n    let rollStr = \"\";\n    let rollTotal = 0;\n\n    const roll = type => {\n      rolls.push(Math.floor(Math.random() * type) + 1);\n    };\n\n    for (let i = 0; i < num; i++) {\n      roll(type);\n    }\n\n    for (let j = 0; j < rolls.length; j++) {\n      rollStr = `${rollStr} + ${rolls[j]}`;\n      rollTotal += rolls[j];\n    }\n\n    const str = () => {\n      setLastRoll(`${name} damage:`);\n      setLastRoll2(`Roll: ${rollStr.slice(2)} + mod ${mod} = ${rollTotal + mod}`);\n    };\n\n    str();\n    setNumofRoll(numOfRoll + 1);\n    setDiceType(type);\n    setNumofDice(rolls.length);\n  };\n\n  const clear = () => {\n    setLastRoll(\"\");\n    setLastRoll2(\"\");\n    setNumofRoll(0);\n    setDiceType(undefined);\n    setNumofDice(null);\n  };\n\n  const renderedBonusAttacks = attacks.map(attacks => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(NameBox, {\n        children: [/*#__PURE__*/_jsxDEV(Title, {\n          children: attacks.name\n        }, attacks.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Type, {\n          children: attacks.type\n        }, `${attacks.type}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this)]\n      }, `${attacks.name} name box`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RangeBox, {\n        children: /*#__PURE__*/_jsxDEV(Range, {\n          children: [attacks.range, \"ft.\"]\n        }, `${attacks.name} range`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this)\n      }, `${attacks.name} range box`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RollBox, {\n        onClick: () => rollDC(attacks.name, attacks.hit),\n        children: /*#__PURE__*/_jsxDEV(BoxP, {\n          children: [\"+\", attacks.hit]\n        }, `${attacks.name} ${attacks.hit}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this)\n      }, `${attacks.name} ${attacks.hit} box`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RollBox, {\n        style: {\n          paddingLeft: 8,\n          paddingRight: 8\n        },\n        onClick: () => rollAttack(attacks.name, attacks.damage.add, attacks.damage.num, attacks.damage.type),\n        children: /*#__PURE__*/_jsxDEV(BoxP, {\n          children: `${attacks.damage.num}d${attacks.damage.type} +${attacks.damage.add}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this)\n      }, `${attacks.name} damage button box`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this)]\n    }, `${attacks.name} row`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this);\n  });\n\n  /*#__PURE__*/\n  _jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(NameLabelBox, {\n          children: /*#__PURE__*/_jsxDEV(Range, {\n            children: \"Attack Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(LabelBox, {\n          children: /*#__PURE__*/_jsxDEV(Range, {\n            children: \"Range\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(LabelBox, {\n          children: /*#__PURE__*/_jsxDEV(Range, {\n            children: \"Hit/DC\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(LabelBox, {\n          children: /*#__PURE__*/_jsxDEV(Range, {\n            children: \"Damage\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 7\n      }, this), renderedBonusAttacks(bonusAttack)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(CharacterRollDisplay, {\n      check: lastRoll,\n      check2: lastRoll2,\n      num: numOfRoll,\n      numOfRoll: numOfDice,\n      type: diceType,\n      onClick: () => clear\n    }, \"Attack Roll Display\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Bonus, \"MM4Yo8Cahk/mB2QR+dj5RcU8Nus=\");\n\n_c12 = Bonus;\nexport default Bonus;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Row\");\n$RefreshReg$(_c3, \"NameBox\");\n$RefreshReg$(_c4, \"Title\");\n$RefreshReg$(_c5, \"Type\");\n$RefreshReg$(_c6, \"RangeBox\");\n$RefreshReg$(_c7, \"NameLabelBox\");\n$RefreshReg$(_c8, \"LabelBox\");\n$RefreshReg$(_c9, \"Range\");\n$RefreshReg$(_c10, \"RollBox\");\n$RefreshReg$(_c11, \"BoxP\");\n$RefreshReg$(_c12, \"Bonus\");","map":{"version":3,"sources":["/Users/Agent1/Desktop/rpg-calculator/src/Componets/CharacterSheet/ActionComponets/Bonus.js"],"names":["React","useState","styled","theme","primary","secondary","background","Container","div","Row","NameBox","Title","p","Type","RangeBox","NameLabelBox","LabelBox","Range","RollBox","BoxP","Bonus","bonusAttack","reactions","lastRoll","setLastRoll","lastRoll2","setLastRoll2","numOfRoll","setNumofRoll","numOfDice","setNumofDice","undefined","diceType","setDiceType","rollDC","name","mod","roll","Math","floor","random","str","rollAttack","num","type","rolls","rollStr","rollTotal","push","i","j","length","slice","clear","renderedBonusAttacks","attacks","map","range","hit","paddingLeft","paddingRight","damage","add"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,KAAP,MAAkB,sBAAlB;;AAEA,MAAM;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,SAAX;AAAsBC,EAAAA;AAAtB,IAAqCH,KAA3C;AAEA,MAAMI,SAAS,GAAGL,MAAM,CAACM,GAAI;AAC7B;AACA;AACA;AACA,CAJA;KAAMD,S;AAMN,MAAME,GAAG,GAAGP,MAAM,CAACM,GAAI;AACvB;AACA;AACA;AACA;AACA,6BAA6BJ,OAAQ;AACrC,CANA;MAAMK,G;AAQN,MAAMC,OAAO,GAAGR,MAAM,CAACM,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;MAAME,O;AAWN,MAAMC,KAAK,GAAGT,MAAM,CAACU,CAAE;AACvB;AACA,WAAWR,OAAQ;AACnB;AACA;AACA;AACA;AACA;AACA,CARA;MAAMO,K;AAUN,MAAME,IAAI,GAAGX,MAAM,CAACM,GAAI;AACxB;AACA;AACA;AACA,CAJA;MAAMK,I;AAMN,MAAMC,QAAQ,GAAGZ,MAAM,CAACM,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA,CANA;MAAMM,Q;AAQN,MAAMC,YAAY,GAAGb,MAAM,CAACM,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;MAAMO,Y;AAUN,MAAMC,QAAQ,GAAGd,MAAM,CAACM,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;MAAMQ,Q;AAUN,MAAMC,KAAK,GAAGf,MAAM,CAACU,CAAE;AACvB;AACA;AACA;AACA,CAJA;MAAMK,K;AAMN,MAAMC,OAAO,GAAGhB,MAAM,CAACM,GAAI;AAC3B,sBAAsBJ,OAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwBC,SAAU;AAClC;AACA;AACA;AACA;AACA;AACA,CAfA;OAAMa,O;AAiBN,MAAMC,IAAI,GAAGjB,MAAM,CAACU,CAAE;AACtB;AACA;AACA,WAAWN,UAAW;AACtB,CAJA;OAAMa,I;;AAMN,MAAMC,KAAK,GAAG,QAAgC;AAAA;;AAAA,MAA/B;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,GAA+B;AAC5C,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BvB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACwB,SAAD,EAAYC,YAAZ,IAA4BzB,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAAC0B,SAAD,EAAYC,YAAZ,IAA4B3B,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAAC4B,SAAD,EAAYC,YAAZ,IAA4B7B,QAAQ,CAAC8B,SAAD,CAA1C;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BhC,QAAQ,CAAC,IAAD,CAAxC;;AAEA,QAAMiC,MAAM,GAAG,CAACC,IAAD,EAAOC,GAAP,KAAe;AAC5B,UAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,IAAiC,CAA9C;;AACA,UAAMC,GAAG,GAAG,MAAM;AAChB,UAAIL,GAAG,GAAG,CAAV,EAAa;AACXZ,QAAAA,WAAW,CAAE,GAAEW,IAAK,UAAT,CAAX;AACAT,QAAAA,YAAY,CAAE,QAAOW,IAAK,YAAWD,GAAI,MAAKC,IAAI,GAAGD,GAAI,EAA7C,CAAZ;AACD;;AACD,UAAIA,GAAG,GAAG,CAAV,EAAa;AACXZ,QAAAA,WAAW,CAAE,GAAEW,IAAK,UAAT,CAAX;AACAT,QAAAA,YAAY,CAAE,QAAOW,IAAK,YAAWD,GAAI,MAAKC,IAAI,GAAGD,GAAI,EAA7C,CAAZ;AACD;;AACD,UAAKA,GAAG,GAAG,CAAX,EAAe;AACbZ,QAAAA,WAAW,CAAE,GAAEW,IAAK,iBAAgBE,IAAK,GAA9B,CAAX;AACAX,QAAAA,YAAY,CAAC,EAAD,CAAZ;AACD;AACF,KAbD;;AAcAe,IAAAA,GAAG;AACHb,IAAAA,YAAY,CAACD,SAAS,GAAG,CAAb,CAAZ;AACAM,IAAAA,WAAW,CAACF,SAAD,CAAX;AACD,GAnBD;;AAqBA,QAAMW,UAAU,GAAG,CAACP,IAAD,EAAOC,GAAP,EAAYO,GAAZ,EAAiBC,IAAjB,KAA0B;AAC3C,UAAMC,KAAK,GAAG,EAAd;AACA,QAAIC,OAAO,GAAG,EAAd;AACA,QAAIC,SAAS,GAAG,CAAhB;;AAEA,UAAMV,IAAI,GAAIO,IAAD,IAAU;AACrBC,MAAAA,KAAK,CAACG,IAAN,CAAWV,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBI,IAA3B,IAAmC,CAA9C;AACD,KAFD;;AAIA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,GAApB,EAAyBM,CAAC,EAA1B,EAA8B;AAC5BZ,MAAAA,IAAI,CAACO,IAAD,CAAJ;AACD;;AAED,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACM,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrCJ,MAAAA,OAAO,GAAI,GAAEA,OAAQ,MAAKD,KAAK,CAACK,CAAD,CAAI,EAAnC;AACAH,MAAAA,SAAS,IAAIF,KAAK,CAACK,CAAD,CAAlB;AACD;;AAED,UAAMT,GAAG,GAAG,MAAM;AAChBjB,MAAAA,WAAW,CAAE,GAAEW,IAAK,UAAT,CAAX;AACAT,MAAAA,YAAY,CACT,SAAQoB,OAAO,CAACM,KAAR,CAAc,CAAd,CAAiB,UAAShB,GAAI,MAAKW,SAAS,GAAGX,GAAI,EADlD,CAAZ;AAGD,KALD;;AAOAK,IAAAA,GAAG;AACHb,IAAAA,YAAY,CAACD,SAAS,GAAG,CAAb,CAAZ;AACAM,IAAAA,WAAW,CAACW,IAAD,CAAX;AACAd,IAAAA,YAAY,CAACe,KAAK,CAACM,MAAP,CAAZ;AACD,GA7BD;;AA+BA,QAAME,KAAK,GAAG,MAAM;AAClB7B,IAAAA,WAAW,CAAC,EAAD,CAAX;AACAE,IAAAA,YAAY,CAAC,EAAD,CAAZ;AACAE,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACAK,IAAAA,WAAW,CAACF,SAAD,CAAX;AACAD,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAND;;AAQA,QAAMwB,oBAAoB,GAAGC,OAAO,CAACC,GAAR,CAAaD,OAAD,IAAa;AACpD,wBACE,QAAC,GAAD;AAAA,8BACE,QAAC,OAAD;AAAA,gCACE,QAAC,KAAD;AAAA,oBAA2BA,OAAO,CAACpB;AAAnC,WAAYoB,OAAO,CAACpB,IAApB;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,IAAD;AAAA,oBAA+BoB,OAAO,CAACX;AAAvC,WAAY,GAAEW,OAAO,CAACX,IAAK,EAA3B;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA,SAAe,GAAEW,OAAO,CAACpB,IAAK,WAA9B;AAAA;AAAA;AAAA;AAAA,cADF,eAKE,QAAC,QAAD;AAAA,+BACE,QAAC,KAAD;AAAA,qBAAsCoB,OAAO,CAACE,KAA9C;AAAA,WAAa,GAAEF,OAAO,CAACpB,IAAK,QAA5B;AAAA;AAAA;AAAA;AAAA;AADF,SAAgB,GAAEoB,OAAO,CAACpB,IAAK,YAA/B;AAAA;AAAA;AAAA;AAAA,cALF,eAQE,QAAC,OAAD;AACE,QAAA,OAAO,EAAE,MAAMD,MAAM,CAACqB,OAAO,CAACpB,IAAT,EAAeoB,OAAO,CAACG,GAAvB,CADvB;AAAA,+BAIE,QAAC,IAAD;AAAA,0BAA+CH,OAAO,CAACG,GAAvD;AAAA,WAAY,GAAEH,OAAO,CAACpB,IAAK,IAAGoB,OAAO,CAACG,GAAI,EAA1C;AAAA;AAAA;AAAA;AAAA;AAJF,SAEQ,GAAEH,OAAO,CAACpB,IAAK,IAAGoB,OAAO,CAACG,GAAI,MAFtC;AAAA;AAAA;AAAA;AAAA,cARF,eAcE,QAAC,OAAD;AAEE,QAAA,KAAK,EAAE;AAAEC,UAAAA,WAAW,EAAE,CAAf;AAAkBC,UAAAA,YAAY,EAAE;AAAhC,SAFT;AAGE,QAAA,OAAO,EAAE,MACPlB,UAAU,CACRa,OAAO,CAACpB,IADA,EAERoB,OAAO,CAACM,MAAR,CAAeC,GAFP,EAGRP,OAAO,CAACM,MAAR,CAAelB,GAHP,EAIRY,OAAO,CAACM,MAAR,CAAejB,IAJP,CAJd;AAAA,+BAYE,QAAC,IAAD;AAAA,oBAAQ,GAAEW,OAAO,CAACM,MAAR,CAAelB,GAAI,IAAGY,OAAO,CAACM,MAAR,CAAejB,IAAK,KAAIW,OAAO,CAACM,MAAR,CAAeC,GAAI;AAA3E;AAAA;AAAA;AAAA;AAAA;AAZF,SACQ,GAAEP,OAAO,CAACpB,IAAK,oBADvB;AAAA;AAAA;AAAA;AAAA,cAdF;AAAA,OAAW,GAAEoB,OAAO,CAACpB,IAAK,MAA1B;AAAA;AAAA;AAAA;AAAA,YADF;AA+BD,GAhC4B,CAA7B;;AAkCA;AAAA,UAAC,KAAD,CAAO,QAAP;AAAA,4BACE,QAAC,SAAD;AAAA,8BACE,QAAC,GAAD;AAAA,gCACE,QAAC,YAAD;AAAA,iCACE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,QAAC,QAAD;AAAA,iCACE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAJF,eAOE,QAAC,QAAD;AAAA,iCACE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAPF,eAUE,QAAC,QAAD;AAAA,iCACE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAVF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAeGmB,oBAAoB,CAACjC,WAAD,CAfvB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAkBE,QAAC,oBAAD;AAEE,MAAA,KAAK,EAAEE,QAFT;AAGE,MAAA,MAAM,EAAEE,SAHV;AAIE,MAAA,GAAG,EAAEE,SAJP;AAKE,MAAA,SAAS,EAAEE,SALb;AAME,MAAA,IAAI,EAAEG,QANR;AAOE,MAAA,OAAO,EAAE,MAAMqB;AAPjB,OACM,qBADN;AAAA;AAAA;AAAA;AAAA,YAlBF;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BD,CAjID;;GAAMjC,K;;OAAAA,K;AAmIN,eAAeA,KAAf","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport theme from \"../../../Logic/theme\";\n\nconst { primary, secondary, background } = theme;\n\nconst Container = styled.div`\n  width: 95%;\n  margin: 0 auto;\n  overflow: scroll;\n`;\n\nconst Row = styled.div`\n  width: 90%;\n  height: 4.2em;\n  margin: 0 auto;\n  display: flex;\n  border-bottom: 1px solid ${primary};\n`;\n\nconst NameBox = styled.div`\n  display: block;\n  text-align: left;\n  margin-left: 1em;\n  min-width: 9em;\n\n  @media (max-width: 600px) {\n    min-width: 7.9em;\n  }\n`;\n\nconst Title = styled.p`\n  font-family: \"Dosis\";\n  color: ${primary};\n  font-size: 1.3em;\n  margin-bottom: 1;\n  @media (max-width: 600px) {\n    font-size: 1.2em;\n  }\n`;\n\nconst Type = styled.div`\n  font-size: 0.7em;\n  margin-top: -1.8em;\n  margin-left: 0.5em;\n`;\n\nconst RangeBox = styled.div`\n  margin-top: 1.2em;\n  width: 2em;\n  @media (max-width: 600px) {\n    margin-left: 0.1em;\n  }\n`;\n\nconst NameLabelBox = styled.div`\n  margin: 1.2em 0 0 1.2em;\n  width: 10em;\n  @media (max-width: 600px) {\n    width: 50em;\n    margin-left: 1em;\n    margin-right: 0em;\n  }\n`;\n\nconst LabelBox = styled.div`\n  margin-top: 1.2em;\n  margin-left: -1.1em;\n  margin-right: 2.6em;\n  width: 2em;\n  @media (max-width: 600px) {\n    margin-left: -1.5em;\n  }\n`;\n\nconst Range = styled.p`\n  font-size: 0.8em;\n  font-weight: bold;\n  text-align: left;\n`;\n\nconst RollBox = styled.div`\n  border: 2px solid ${primary};\n  border-radius: 5px;\n  min-width: 2em;\n  height: 2em;\n  margin-top: 1.3em;\n  margin-left: 1.5em;\n  :hover {\n    cursor: pointer;\n    background-color: ${secondary};\n  }\n\n  @media (max-width: 600px) {\n    margin-left: 1.1em;\n  }\n`;\n\nconst BoxP = styled.p`\n  font-family: \"Dosis\";\n  margin-top: 0.35em;\n  color: ${background};\n`;\n\nconst Bonus = ({ bonusAttack, reactions }) => {\n  const [lastRoll, setLastRoll] = useState(\"\");\n  const [lastRoll2, setLastRoll2] = useState(\"\");\n  const [numOfRoll, setNumofRoll] = useState(0);\n  const [numOfDice, setNumofDice] = useState(undefined);\n  const [diceType, setDiceType] = useState(null);\n\n  const rollDC = (name, mod) => {\n    const roll = Math.floor(Math.random() * 20) + 1;\n    const str = () => {\n      if (mod > 0) {\n        setLastRoll(`${name} to hit:`);\n        setLastRoll2(`Roll ${roll} + Bonus ${mod} = ${roll + mod}`);\n      }\n      if (mod < 0) {\n        setLastRoll(`${name} to hit:`);\n        setLastRoll2(`Roll ${roll} - Bonus ${mod} = ${roll + mod}`);\n      }\n      if ((mod = 0)) {\n        setLastRoll(`${name} to hit: Roll ${roll}:`);\n        setLastRoll2(\"\");\n      }\n    };\n    str();\n    setNumofRoll(numOfRoll + 1);\n    setDiceType(undefined);\n  };\n\n  const rollAttack = (name, mod, num, type) => {\n    const rolls = [];\n    let rollStr = \"\";\n    let rollTotal = 0;\n\n    const roll = (type) => {\n      rolls.push(Math.floor(Math.random() * type) + 1);\n    };\n\n    for (let i = 0; i < num; i++) {\n      roll(type);\n    }\n\n    for (let j = 0; j < rolls.length; j++) {\n      rollStr = `${rollStr} + ${rolls[j]}`;\n      rollTotal += rolls[j];\n    }\n\n    const str = () => {\n      setLastRoll(`${name} damage:`);\n      setLastRoll2(\n        `Roll: ${rollStr.slice(2)} + mod ${mod} = ${rollTotal + mod}`\n      );\n    };\n\n    str();\n    setNumofRoll(numOfRoll + 1);\n    setDiceType(type);\n    setNumofDice(rolls.length);\n  };\n\n  const clear = () => {\n    setLastRoll(\"\");\n    setLastRoll2(\"\");\n    setNumofRoll(0);\n    setDiceType(undefined);\n    setNumofDice(null);\n  };\n\n  const renderedBonusAttacks = attacks.map((attacks) => {\n    return (\n      <Row key={`${attacks.name} row`}>\n        <NameBox key={`${attacks.name} name box`}>\n          <Title key={attacks.name}>{attacks.name}</Title>\n          <Type key={`${attacks.type}`}>{attacks.type}</Type>\n        </NameBox>\n        <RangeBox key={`${attacks.name} range box`}>\n          <Range key={`${attacks.name} range`}>{attacks.range}ft.</Range>\n        </RangeBox>\n        <RollBox\n          onClick={() => rollDC(attacks.name, attacks.hit)}\n          key={`${attacks.name} ${attacks.hit} box`}\n        >\n          <BoxP key={`${attacks.name} ${attacks.hit}`}>+{attacks.hit}</BoxP>\n        </RollBox>\n        <RollBox\n          key={`${attacks.name} damage button box`}\n          style={{ paddingLeft: 8, paddingRight: 8 }}\n          onClick={() =>\n            rollAttack(\n              attacks.name,\n              attacks.damage.add,\n              attacks.damage.num,\n              attacks.damage.type\n            )\n          }\n        >\n          <BoxP>{`${attacks.damage.num}d${attacks.damage.type} +${attacks.damage.add}`}</BoxP>\n        </RollBox>\n      </Row>\n    );\n  });\n\n  <React.Fragment>\n    <Container>\n      <Row>\n        <NameLabelBox>\n          <Range>Attack Name</Range>\n        </NameLabelBox>\n        <LabelBox>\n          <Range>Range</Range>\n        </LabelBox>\n        <LabelBox>\n          <Range>Hit/DC</Range>\n        </LabelBox>\n        <LabelBox>\n          <Range>Damage</Range>\n        </LabelBox>\n      </Row>\n      {renderedBonusAttacks(bonusAttack)}\n    </Container>\n    <CharacterRollDisplay\n      key=\"Attack Roll Display\"\n      check={lastRoll}\n      check2={lastRoll2}\n      num={numOfRoll}\n      numOfRoll={numOfDice}\n      type={diceType}\n      onClick={() => clear}\n    />\n  </React.Fragment>;\n};\n\nexport default Bonus;\n"]},"metadata":{},"sourceType":"module"}